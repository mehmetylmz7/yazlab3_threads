@model List<yazlab3.Models.Order>

<h2>Siparişleriniz</h2>
@{
    var orderStatusMessage = ViewBag.OrderStatusMessage as string;



    var orderedModel = Model.OrderByDescending(order => order.OrderPriority).ToList(); // Önceliğe göre sıralama
}

@if (!string.IsNullOrEmpty(orderStatusMessage))



{
    <div class="alert alert-success">
        @orderStatusMessage
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Ürün Adı</th>
            <th>Adet</th>
            <th>Toplam Fiyat</th>
            <th>Sipariş Durumu</th>
            <th>Bekleme Süresi</th>
            <th>Öncelik</th>
            <th>İşlemler</th> <!-- İşlem butonları için yeni bir sütun -->
        </tr>
    </thead>
    <tbody id="orderTableBody">
        @foreach (var order in orderedModel)



        {
            <tr class="order-row">
                <td>@order.Product.ProductID</td>
                <td>@order.Quantity</td>
                <td>@order.TotalPrice TL</td>
                <td>@order.OrderStatus</td>
                <td>@(order.WaitTime.TotalMinutes) dakika</td> <!-- Bekleme süresini dakika cinsine çevir -->
                <td>@order.OrderPriority</td> <!-- Siparişin önceliği -->
                <td>
                    @if (order.OrderStatus == "Siparişiniz Alındı") // Eğer sipariş durumu onay bekliyorsa
                    {
                        <a href="@Url.Action("ApproveOrder", "Admin", new { orderId = order.OrderID })" class="btn btn-success">Onayla</a>
                        <a href="@Url.Action("RejectOrder", "Admin", new { orderId = order.OrderID })" class="btn btn-danger">Reddet</a>
                    }
                    else
                    {
                        <span class="text-muted">İşlem Tamamlandı</span> <!-- İşlem tamamlandıysa butonları gizle -->
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<div>
    <form method="post" action="@Url.Action("ProcessAllOrders", "Admin")">
        <button type="submit" class="btn btn-primary">Tüm İşlemleri Başlat</button>
    </form>
</div>

<p>
    <a href="@Url.Action("ViewLogs", "Admin")">Logları Görüntüle</a>
</p>
<script>
    function updateOrders() {
        fetch('/Admin/GetUpdatedOrders')
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById('orderTableBody');
                tbody.innerHTML = ''; // Tabloyu temizle

                data.forEach(order => {
                    const row = document.createElement('tr');

                    row.innerHTML = `
                        <td>${order.orderID}</td>
                        <td>${order.waitTime.TotalMinutes.toFixed(2)} dakika</td>
                        <td>${order.orderPriority}</td>
                        <td>${order.orderStatus}</td>
                        <td>
                            ${order.orderStatus === 'Sepette' ? `
                                <a href="/Admin/ApproveOrder?orderId=${order.orderID}" class="btn btn-success">Onayla</a>
                                <a href="/Admin/RejectOrder?orderId=${order.orderID}" class="btn btn-danger">Reddet</a>
                            ` : '<span class="text-muted">İşlem Tamamlandı</span>'}
                        </td>
                    `;

                    tbody.appendChild(row);
                });
            })
            .catch(error => console.error('Veriler alınırken hata oluştu:', error));
    }

    // Her 3 saniyede bir tabloyu güncelle
   // setInterval(updateOrders, 3000);
</script>
<script>
    // Her 5 saniyede bir sayfayı yeniler
    setInterval(() => {
        location.reload(); // Sayfayı yeniden yükler
    }, 5000); // 5000 ms = 5 saniye
</script>